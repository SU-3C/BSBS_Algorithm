package Week9;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class BOJ_Main_10866 {
    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        ArrayDeque<Integer> deque = new ArrayDeque<Integer>();

        StringBuilder sb = new StringBuilder();

        int T = Integer.parseInt(bf.readLine());

        for (int i = 0; i < T; i++) {
            String[] s = bf.readLine().split(" ");

            switch (s[0]) {

                case "push_front": {
                    deque.addFirst(Integer.parseInt(s[1]));
                    break;
                }

                case "push_back": {
                    deque.addLast(Integer.parseInt(s[1]));
                    break;
                }

                case "pop_front": {
                    if (deque.isEmpty()) {
                        sb.append(-1).append("\n");
                    } else {
                        sb.append(deque.pollFirst()).append("\n");
                    }
                    break;
                }
                case "pop_back": {
                    if (deque.isEmpty()) {
                        sb.append(-1).append("\n");
                    } else {
                        sb.append(deque.pollLast()).append("\n");
                    }
                    break;
                }

                case "front": {
                    if (deque.isEmpty()) {
                        sb.append(-1).append("\n");
                    } else {
                        sb.append(deque.peekFirst()).append("\n");
                    }
                    break;
                }

                case "back": {
                    if (deque.isEmpty()) {
                        sb.append(-1).append("\n");
                    } else {
                        sb.append(deque.peekLast()).append("\n");
                    }
                    break;
                }

                case "size": {
                    sb.append(deque.size()).append("\n");
                    break;
                }

                case "empty": {
                    if (!deque.isEmpty()) {
                        sb.append(0).append("\n");
                    } else {
                        sb.append(1).append("\n");
                    }
                    break;
                }
            }
        }
        System.out.println(sb);
    }
}
